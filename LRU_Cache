#include <iostream>
#include <unordered_map>
#include <string>

class DoubleLinkedListNode {
public:
    int val;
    long timestamp;
    std::string filepath;
    DoubleLinkedListNode* next;
    DoubleLinkedListNode* prev;

    DoubleLinkedListNode(int value, long ts, const std::string& fp)
        : val(value), timestamp(ts), filepath(fp), next(nullptr), prev(nullptr) {}
};

class LRUCache {
private:
    DoubleLinkedListNode* head;
    DoubleLinkedListNode* tail;
    DoubleLinkedListNode* temp;
    std::unordered_map<std::string, DoubleLinkedListNode*> cacheMap;
    int status;

public:
    LRUCache() : head(nullptr), tail(nullptr), temp(nullptr), status(0) {}

    // Add a node to the cache
    int addNode(int value, long timestamp, const std::string& filepath) {
        if (head == nullptr) {
            head = new DoubleLinkedListNode(value, timestamp, filepath);
            tail = head;
            head->prev = nullptr;
        } else {
            temp = tail;
            tail->next = new DoubleLinkedListNode(value, timestamp, filepath);
            tail = tail->next;
            tail->prev = temp;
        }
        tail->next = nullptr;
        cacheMap[filepath] = tail;
        return 0;
    }

    // Display the contents of the cache
    int display() {
        if (head == nullptr) {
            std::cout << "Add a node first" << std::endl;
            return -2;
        } else {
            temp = head;
            while (temp != nullptr) {
                std::cout << "[" << temp->val << ", " << temp->timestamp << ", " << temp->filepath << "]->";
                temp = temp->next;
            }
            std::cout << "NULL" << std::endl;
        }
        return 0;
    }

    // Search for a value in the cache and update it as the most recently used
    int searchCache(int value, long timestamp, const std::string& filepath) {
        if (head == nullptr) {
            std::cout << "Add a node first" << std::endl;
            return -1;
        }

        if (cacheMap.find(filepath) != cacheMap.end()) {
            temp = cacheMap[filepath];
            // Update the timestamp and move the current node to the front of the list
            temp->timestamp = timestamp;

            if (temp != head) {
                temp->prev->next = temp->next;

                if (temp->next != nullptr) {
                    temp->next->prev = temp->prev;
                } else {
                    tail = temp->prev;
                }

                temp->next = head;
                temp->prev = nullptr;
                head->prev = temp;
                head = temp;
            }
        } else {
            temp = tail->prev;
            while (temp != nullptr) {
                temp->next->val = temp->val;
                temp->next->timestamp = temp->timestamp;
                temp->next->filepath = temp->filepath;
                temp = temp->prev;
            }
            head->val = value;
            head->timestamp = timestamp;
            head->filepath = filepath;
        }
        return 0;
    }

    // Add a specified number of nodes to the cache
    int numberOfNodes(int number) {
        for (int i = 0; i < number; i++) {
            status = addNode(0, 0, "");
            if (status < 0) {
                std::cout << "Could not assign node" << std::endl;
                return status;
            }
        }
        return 0;
    }

    // Free the cache by removing all nodes
    int freeCache() {
        temp = head;
        while (temp != nullptr) {
            head = head->next;
            delete temp;
            temp = head;
        }
        tail = nullptr;
        return 0;
    }

    // Perform LRU operations on the cache using an array of values
    void lruOp(const int arr[], const long timestamps[], const std::string filepaths[], int n) {
        for (int i = 0; i < n; i++) {
            status = searchCache(arr[i], timestamps[i], filepaths[i]);
            if (status < 0) {
                exit(1);
            }
            status = display();
        }
    }
};

int main() {
    int MEMSIZE = 5;
    LRUCache cache;
    cache.numberOfNodes(MEMSIZE);
    int n = 10;
    int arr[] = {1, 2, 3, 4, 5, 2, 10, 7, 11, 1};
    long timestamps[] = {1234567890, 1234567891, 1234567892, 1234567893, 1234567894, 1234567895, 1234567896, 1234567897, 1234567898, 1234567899};
    std::string filepaths[] = {"/path/to/file1.txt", "/path/to/file2.txt", "/path/to/file3.txt", "/path/to/file4.txt", "/path/to/file5.txt",
                                "/path/to/file2.txt", "/path/to/file10.txt", "/path/to/file7.txt", "/path/to/file11.txt", "/path/to/file1.txt"};
    cache.lruOp(arr, timestamps, filepaths, n);
    cache.freeCache();

    return 0;
}
